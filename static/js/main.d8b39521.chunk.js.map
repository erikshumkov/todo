{"version":3,"sources":["layout/Header.js","layout/Message.js","layout/Modal.js","layout/TaskCounter.js","layout/Form.js","TodoList/TaskTitle.js","TodoList/Task.js","TodoList/index.js","layout/CompletedCounter.js","pages/About.js","App.js","index.js"],"names":["Header","now","Date","day","getDate","month","toLocaleString","toUpperCase","year","getFullYear","react_default","a","createElement","className","react_router_dom","to","Message","_ref","getTotalTasks","getCompletedTasks","Modal","modal","closeModal","message","style","display","onClick","layout_Message","TaskCounter","totalTasks","Form","newTaskSubmitHandler","taskName","addNewTaskName","onSubmit","type","placeholder","value","onChange","name","TaskTitle","isEditing","isCompleted","handleTitleEdits","children","textDecoration","Task","title","handleConfirmation","removeGuest","handleToggleEditing","setTitle","TodoList_TaskTitle","e","target","TodoList","tasks","toggleConfirmationAt","toggleEditingAt","removeTaskAt","setTitleAt","map","task","index","TodoList_Task","key","text","CompletedCounter","numberCompleted","About","react","App","state","list","toggleTaskPropertyAt","property","indexToChange","_this","setState","Object","objectSpread","defineProperty","storage","filter","i","toConsumableArray","id","localStorage","setItem","JSON","stringify","length","preventDefault","_this$state","push","concat","openModal","reduce","total","prevProps","previousState","_this2","this","checkAllTrue","complete","every","bool","getItem","parsedList","parse","newList","ls","li","_this3","basename","layout_Header","layout_Modal","react_router","exact","path","render","props","layout_Form","layout_TaskCounter","src_TodoList","layout_CompletedCounter","component","Component","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.d8b39521.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n  const now = new Date();\r\n  const day = now.getDate();\r\n  const month = now.toLocaleString('en-us', { month: 'short' }).toUpperCase();\r\n  const year = now.getFullYear();\r\n\r\n  return (\r\n    <header>\r\n      <div className='titlenav'>\r\n        <h1 className='sitetitle'>Important Tasks</h1>\r\n\r\n        <ul className='nav'>\r\n          <li>\r\n            <Link to='/'>Home</Link>\r\n          </li>\r\n          <li>\r\n            <Link to='/about'>About</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div className='header-main'>\r\n        <div className='dateDiv'>\r\n          <h1 className='date'>{day}</h1>\r\n          <div className='dateDiv2'>\r\n            <span className='month'>{month}</span>\r\n            <span>{year}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Message = ({ getTotalTasks, getCompletedTasks }) => {\r\n  if (getCompletedTasks === 5) {\r\n    return <p>You Won The Day!</p>;\r\n  }\r\n  if (getTotalTasks === 5) {\r\n    return <p>A total of 5 tasks are allowed.</p>;\r\n  }\r\n  return <p>Nothing to return</p>;\r\n};\r\n\r\nMessage.propTypes = {\r\n  getTotalTasks: PropTypes.number.isRequired,\r\n  getCompletedTasks: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Message from './Message';\r\n\r\nconst Modal = ({\r\n  modal,\r\n  closeModal,\r\n  message,\r\n  getTotalTasks,\r\n  getCompletedTasks\r\n}) => {\r\n  if (modal) {\r\n    return (\r\n      <div className='modal' style={{ display: 'block' }} onClick={closeModal}>\r\n        <div className='modal-content'>\r\n          <Message\r\n            message={message}\r\n            getTotalTasks={getTotalTasks}\r\n            getCompletedTasks={getCompletedTasks}\r\n          />\r\n          <button className='btnClose' onClick={closeModal}>\r\n            okay\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nModal.propTypes = {\r\n  modal: PropTypes.bool.isRequired,\r\n  openModal: PropTypes.func.isRequired,\r\n  closeModal: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TaskCounter = ({ totalTasks }) => (\r\n  <span className='task-counter'>\r\n    {' '}\r\n    {totalTasks} of {5} tasks\r\n  </span>\r\n);\r\n\r\nTaskCounter.propTypes = {\r\n  totalTasks: PropTypes.number.isRequired\r\n};\r\n\r\nexport default TaskCounter;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({ newTaskSubmitHandler, taskName, addNewTaskName }) => (\r\n  <form className='additem' onSubmit={newTaskSubmitHandler}>\r\n    <input\r\n      className='add-task'\r\n      type='text'\r\n      placeholder='Add new task'\r\n      value={taskName}\r\n      onChange={addNewTaskName}\r\n    />\r\n    <button\r\n      className='addBtn'\r\n      type='submit'\r\n      name='submit'\r\n      onClick={newTaskSubmitHandler}\r\n    >\r\n      <i className='fas fa-plus-circle' />\r\n    </button>\r\n  </form>\r\n);\r\n\r\nForm.propTypes = {\r\n  newTaskSubmitHandler: PropTypes.func.isRequired,\r\n  taskName: PropTypes.string.isRequired,\r\n  addNewTaskName: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TaskTitle = ({ isEditing, isCompleted, handleTitleEdits, children }) => {\r\n  if (isEditing) {\r\n    return (\r\n      <input\r\n        className='task-title'\r\n        type='text'\r\n        value={children}\r\n        onChange={handleTitleEdits}\r\n      />\r\n    );\r\n  }\r\n  if (isCompleted) {\r\n    return (\r\n      <span style={{ textDecoration: 'line-through' }} className='task-title'>\r\n        {children}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  return <span className='task-title'>{children}</span>;\r\n};\r\n\r\nTaskTitle.propTypes = {\r\n  isEditing: PropTypes.bool.isRequired,\r\n  isCompleted: PropTypes.bool.isRequired,\r\n  handleTitleEdits: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskTitle;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport TaskTitle from './TaskTitle';\r\n\r\nconst Task = ({\r\n  title,\r\n  isEditing,\r\n  isCompleted,\r\n  handleConfirmation,\r\n  removeGuest,\r\n  handleToggleEditing,\r\n  setTitle\r\n}) => (\r\n  <li className='holder'>\r\n    <TaskTitle\r\n      className='task'\r\n      isCompleted={isCompleted}\r\n      isEditing={isEditing}\r\n      handleTitleEdits={e => setTitle(e.target.value)}\r\n    >\r\n      {title}\r\n    </TaskTitle>\r\n\r\n    <div className='buttons'>\r\n      <button className='checkBtn btn' onClick={handleConfirmation}>\r\n        <i className='fas fa-check' />\r\n      </button>\r\n      <button className='editBtn btn' onClick={handleToggleEditing}>\r\n        {isEditing ? 'save' : 'edit'}\r\n      </button>\r\n      <button className='removeBtn btn' onClick={removeGuest}>\r\n        <i className='fas fa-trash-alt' />\r\n      </button>\r\n    </div>\r\n  </li>\r\n);\r\n\r\nTask.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  isEditing: PropTypes.bool.isRequired,\r\n  isCompleted: PropTypes.bool.isRequired,\r\n  handleConfirmation: PropTypes.func.isRequired,\r\n  removeGuest: PropTypes.func.isRequired,\r\n  handleToggleEditing: PropTypes.func.isRequired,\r\n  setTitle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Task from './Task';\r\n\r\nconst TodoList = ({\r\n  tasks,\r\n  toggleConfirmationAt,\r\n  toggleEditingAt,\r\n  removeTaskAt,\r\n  setTitleAt\r\n}) => {\r\n  return (\r\n    <ul className='todolist'>\r\n      {tasks.map((task, index) => (\r\n        <Task\r\n          key={index}\r\n          title={task.title}\r\n          isEditing={task.isEditing}\r\n          isCompleted={task.isCompleted}\r\n          handleConfirmation={() => toggleConfirmationAt(index)}\r\n          handleToggleEditing={() => toggleEditingAt(index)}\r\n          removeGuest={() => removeTaskAt(index)}\r\n          setTitle={text => setTitleAt(text, index)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nTodoList.propTypes = {\r\n  tasks: PropTypes.array.isRequired,\r\n  toggleConfirmationAt: PropTypes.func.isRequired,\r\n  toggleEditingAt: PropTypes.func.isRequired,\r\n  removeTaskAt: PropTypes.func.isRequired,\r\n  setTitleAt: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CompletedCounter = ({ numberCompleted }) => (\r\n  <span className='completed-counter'>\r\n    {numberCompleted} of {5} tasks completed\r\n  </span>\r\n);\r\n\r\nCompletedCounter.propTypes = {\r\n  numberCompleted: PropTypes.number.isRequired\r\n};\r\n\r\nexport default CompletedCounter;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <Fragment>\r\n      <h2 className='about--h2'>About This App</h2>\r\n      <p className='about--p'>\r\n        List important tasks so you can win the day and make a habit of winning!\r\n      </p>\r\n      <p className='about--p version'>Version: 0.9</p>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { Component, Fragment } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport './norm.css';\nimport './App.css';\n\nimport Header from './layout/Header';\nimport Modal from './layout/Modal';\nimport TaskCounter from './layout/TaskCounter';\nimport Form from './layout/Form';\nimport TodoList from './TodoList';\nimport CompletedCounter from './layout/CompletedCounter';\nimport About from './pages/About';\n\nclass App extends Component {\n  state = {\n    taskName: '',\n    tasks: [],\n    list: [],\n    modal: false\n  };\n\n  toggleTaskPropertyAt = (property, indexToChange) => {\n    const { tasks } = this.state;\n    this.setState({\n      tasks: tasks.map((task, index) => {\n        if (index === indexToChange) {\n          return {\n            ...task,\n            [property]: !task[property]\n          };\n        }\n        return task;\n      })\n    });\n  };\n\n  toggleConfirmationAt = index =>\n    this.toggleTaskPropertyAt('isCompleted', index);\n\n  toggleEditingAt = index => this.toggleTaskPropertyAt('isEditing', index);\n\n  setTitleAt = (title, indexToChange) =>\n    this.setState({\n      tasks: this.state.tasks.map((task, index) => {\n        if (index === indexToChange) {\n          return {\n            ...task,\n            title\n          };\n        }\n        return task;\n      })\n    });\n\n  removeTaskAt = index => {\n    const { tasks } = this.state;\n    const storage = tasks\n      .filter((task, i) => {\n        if (i !== index) {\n          return task.title;\n        } else return null;\n      })\n      .map(task => {\n        return task.title;\n      });\n\n    this.setState({ tasks: [...tasks.filter((task, id) => id !== index)] });\n\n    localStorage.setItem('tasks', JSON.stringify(storage));\n  };\n\n  getTotalTasks = () => this.state.tasks.length;\n\n  addNewTaskName = e => {\n    this.setState({ taskName: e.target.value });\n  };\n\n  newTaskSubmitHandler = e => {\n    e.preventDefault();\n    const { tasks, taskName } = this.state;\n    const newTasksArrayLength = tasks.length;\n    const totalAllowedTasks = 5;\n    if (newTasksArrayLength < totalAllowedTasks) {\n      let list = this.state.list;\n      list.push(taskName);\n      localStorage.setItem('tasks', JSON.stringify(list));\n      this.setState({\n        tasks: [\n          ...tasks,\n          {\n            title: taskName,\n            isCompleted: false,\n            isEditing: false\n          }\n        ],\n        taskName: ''\n      });\n    } else {\n      this.openModal();\n    }\n  };\n\n  getCompletedTasks = () =>\n    this.state.tasks.reduce(\n      (total, task) => (task.isCompleted ? total + 1 : total),\n      0\n    );\n\n  openModal = () => this.setState({ modal: true });\n\n  closeModal = () => this.setState({ modal: false });\n\n  componentDidUpdate(prevProps, previousState) {\n    const { tasks } = this.state;\n    const getComplete = tasks.map(complete => complete.isCompleted);\n    const checkAllTrue = getComplete.every(bool => bool === true);\n    const getCompletedTasks = this.getCompletedTasks();\n\n    if (checkAllTrue && getCompletedTasks === 5) {\n      tasks.map((complete, index) => {\n        if (complete.isCompleted !== previousState.tasks[index].isCompleted) {\n          return this.openModal();\n        }\n        return null;\n      });\n    }\n  }\n\n  componentDidMount() {\n    const { tasks } = this.state;\n    let list = localStorage.getItem('tasks');\n    if (list === null) {\n      localStorage.setItem('tasks', JSON.stringify([]));\n      list = localStorage.getItem('tasks');\n    }\n    const parsedList = JSON.parse(list);\n    let newList = [];\n    let ls = [];\n    parsedList.map((li, index) => {\n      ls = [...ls, li];\n      newList = [\n        ...newList,\n        {\n          title: li,\n          isCompleted: false,\n          isEditing: false\n        }\n      ];\n      return newList;\n    });\n    this.setState({\n      tasks: [...tasks, ...newList],\n      list: [...ls]\n    });\n  }\n\n  render() {\n    const totalTasks = this.getTotalTasks();\n    const numberCompleted = this.getCompletedTasks();\n\n    return (\n      <HashRouter basename='/'>\n        <div className='App'>\n          <div className='body'>\n            <div>\n              <Header />\n              <main>\n                <Modal\n                  modal={this.state.modal}\n                  openModal={this.openModal}\n                  closeModal={this.closeModal}\n                  message={this.state.message}\n                  getTotalTasks={totalTasks}\n                  getCompletedTasks={numberCompleted}\n                />\n\n                <Switch>\n                  <Route\n                    exact\n                    path='/'\n                    render={props => (\n                      <Fragment>\n                        <span className='title'>Task title</span>\n                        <Form\n                          newTaskSubmitHandler={this.newTaskSubmitHandler}\n                          taskName={this.state.taskName}\n                          addNewTaskName={this.addNewTaskName}\n                        />\n\n                        <TaskCounter totalTasks={totalTasks} />\n\n                        <TodoList\n                          tasks={this.state.tasks}\n                          toggleConfirmationAt={this.toggleConfirmationAt}\n                          toggleEditingAt={this.toggleEditingAt}\n                          removeTaskAt={this.removeTaskAt}\n                          setTitleAt={this.setTitleAt}\n                        />\n\n                        <CompletedCounter numberCompleted={numberCompleted} />\n                      </Fragment>\n                    )}\n                  />\n                  <Route exact path='/about' component={About} />\n                </Switch>\n              </main>\n            </div>\n          </div>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}